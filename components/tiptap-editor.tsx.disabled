"use client"

import { useState, useEffect, useCallback, useMemo, useRef, memo } from 'react'
import { useEditor, EditorContent } from '@tiptap/react'
import StarterKit from '@tiptap/starter-kit'
import Image from '@tiptap/extension-image'
import Table from '@tiptap/extension-table'
import TableRow from '@tiptap/extension-table-row'
import TableHeader from '@tiptap/extension-table-header'
import TableCell from '@tiptap/extension-table-cell'
import Link from '@tiptap/extension-link'
import Placeholder from '@tiptap/extension-placeholder'
import Typography from '@tiptap/extension-typography'
import { Button } from '@/components/ui/button'
import { Separator } from '@/components/ui/separator'
import { Skeleton } from '@/components/ui/skeleton'
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip'
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger, DropdownMenuSeparator } from '@/components/ui/dropdown-menu'
import { 
  Bold, 
  Italic, 
  Underline,
  Code, 
  Link as LinkIcon, 
  List, 
  ListOrdered, 
  Quote, 
  Heading1, 
  Heading2, 
  Heading3,
  Save,
  Trash2,
  MoreVertical,
  Check,
  Clock,
  ChevronDown,
  AlertCircle,
  Image as ImageIcon,
  Table as TableIcon,
  FileCode,
  Undo,
  Redo
} from 'lucide-react'
import { Note } from '@/lib/pocketbase'
import { deleteNote, uploadImage } from '@/lib/notes-api'
import { formatDistanceToNow } from 'date-fns'

interface TiptapEditorProps {
  note: Note
  onSave: (note: Note) => void
  onDelete: (noteId: string) => void
  onTitleChange: (title: string) => void
}

// Ultra-optimized status display
const StatusDisplay = memo(({ 
  status, 
  lastSaved, 
  saveNow 
}: {
  status: string
  lastSaved: Date | null
  saveNow: () => void
}) => {
  const { icon, text } = useMemo(() => {
    switch (status) {
      case 'saved': 
        return {
          icon: <Check className="size-3 text-green-600" />,
          text: lastSaved ? `Saved ${formatDistanceToNow(lastSaved, { addSuffix: true })}` : 'All changes saved'
        }
      case 'saving': 
        return {
          icon: <Clock className="size-3 text-blue-600 animate-pulse" />,
          text: 'Saving...'
        }
      case 'unsaved': 
        return {
          icon: <AlertCircle className="size-3 text-orange-600" />,
          text: 'Unsaved changes'
        }
      case 'error': 
        return {
          icon: <AlertCircle className="size-3 text-red-600" />,
          text: 'Save failed'
        }
      default:
        return {
          icon: <Check className="size-3 text-green-600" />,
          text: 'All changes saved'
        }
    }
  }, [status, lastSaved])

  return (
    <div className="flex items-center space-x-2 text-xs text-muted-foreground min-w-[150px]">
      {status === 'saving' ? (
        <div className="flex items-center space-x-2">
          <Skeleton className="w-3 h-3 rounded-full" />
          <span>{text}</span>
        </div>
      ) : (
        <>
          {icon}
          <span className="whitespace-nowrap">{text}</span>
          {status === 'error' && (
            <Button 
              variant="ghost" 
              size="sm" 
              onClick={saveNow}
              className="h-5 px-2 text-xs ml-2"
            >
              Retry
            </Button>
          )}
        </>
      )}
    </div>
  )
})

StatusDisplay.displayName = 'StatusDisplay'

const TiptapEditor = memo(function TiptapEditor({ 
  note, 
  onSave, 
  onDelete, 
  onTitleChange 
}: TiptapEditorProps) {
  const [showBackupNotification, setShowBackupNotification] = useState(false)
  const [isUploading, setIsUploading] = useState(false)
  
  // Refs for uncontrolled title input and sync management
  const titleInputRef = useRef<HTMLInputElement>(null)
  const fileInputRef = useRef<HTMLInputElement>(null)
  const syncTimerRef = useRef<NodeJS.Timeout | undefined>(undefined)
  const contentSyncRef = useRef<string>('')
  const titleSyncRef = useRef<string>('')
  const isServerUpdateRef = useRef(false)

  // Tiptap editor setup
  const editor = useEditor({
    extensions: [
      StarterKit.configure({
        // Configure built-in extensions
        heading: {
          levels: [1, 2, 3],
        },
        bulletList: {
          HTMLAttributes: {
            class: 'list-disc list-inside',
          },
        },
        orderedList: {
          HTMLAttributes: {
            class: 'list-decimal list-inside',
          },
        },
        blockquote: {
          HTMLAttributes: {
            class: 'border-l-4 border-gray-300 pl-4 italic',
          },
        },
        code: {
          HTMLAttributes: {
            class: 'bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded text-sm font-mono',
          },
        },
        codeBlock: {
          HTMLAttributes: {
            class: 'bg-gray-100 dark:bg-gray-800 p-4 rounded-lg font-mono text-sm overflow-x-auto',
          },
        },
      }),
      Image.configure({
        HTMLAttributes: {
          class: 'max-w-full h-auto rounded-lg shadow-sm border border-gray-200 dark:border-gray-700',
        },
      }),
      Table.configure({
        resizable: true,
        HTMLAttributes: {
          class: 'border-collapse border border-gray-300 dark:border-gray-600 w-full my-4',
        },
      }),
      TableRow.configure({
        HTMLAttributes: {
          class: 'border border-gray-300 dark:border-gray-600',
        },
      }),
      TableHeader.configure({
        HTMLAttributes: {
          class: 'border border-gray-300 dark:border-gray-600 bg-gray-50 dark:bg-gray-800 px-4 py-2 text-left font-semibold',
        },
      }),
      TableCell.configure({
        HTMLAttributes: {
          class: 'border border-gray-300 dark:border-gray-600 px-4 py-2',
        },
      }),
      Link.configure({
        HTMLAttributes: {
          class: 'text-blue-600 dark:text-blue-400 underline hover:text-blue-800 dark:hover:text-blue-300',
        },
        openOnClick: false,
      }),
      Placeholder.configure({
        placeholder: 'Start writing your document...',
      }),
      Typography,
    ],
    content: '',
    editorProps: {
      attributes: {
        class: 'prose prose-gray dark:prose-invert max-w-none prose-headings:font-semibold prose-h1:text-3xl prose-h2:text-2xl prose-h3:text-xl prose-p:text-base prose-p:leading-relaxed focus:outline-none min-h-[600px] px-8 py-8',
      },
    },
    onUpdate: ({ editor }) => {
      if (!isServerUpdateRef.current) {
        debouncedSync()
      }
    },
  })

  // Sync content to auto-save
  const syncToAutoSave = useCallback(() => {
    const titleInput = titleInputRef.current
    
    if (editor && titleInput) {
      const currentContent = editor.getHTML()
      const currentTitle = titleInput.value
      
      if (currentContent !== contentSyncRef.current || currentTitle !== titleSyncRef.current) {
        contentSyncRef.current = currentContent
        titleSyncRef.current = currentTitle
        autoSave.updateData(currentTitle, currentContent)
        onTitleChange(currentTitle)
      }
    }
  }, [editor, autoSave.updateData, onTitleChange])

  // Debounced sync
  const debouncedSync = useCallback(() => {
    if (syncTimerRef.current) {
      clearTimeout(syncTimerRef.current)
    }
    syncTimerRef.current = setTimeout(syncToAutoSave, 300)
  }, [syncToAutoSave])

  const handleTitleInput = useCallback(() => {
    debouncedSync()
  }, [debouncedSync])

  // Initialize content when note changes
  useEffect(() => {
    if (note.id && editor && titleInputRef.current) {
      const backupKey = `note-backup-${note.id}`
      let shouldUseBackup = false
      let initTitle = note.title || ''
      let initContent = note.content || ''
      
      // Check for backup
      if (typeof window !== 'undefined') {
        try {
          const backup = localStorage.getItem(backupKey)
          if (backup) {
            const parsed = JSON.parse(backup)
            const backupAge = Date.now() - parsed.timestamp
            if (backupAge < 3600000 && parsed.timestamp > new Date(note.updated || 0).getTime()) {
              initTitle = parsed.title || ''
              initContent = parsed.content || ''
              shouldUseBackup = true
              setShowBackupNotification(true)
              setTimeout(() => setShowBackupNotification(false), 5000)
            }
          }
        } catch (error) {
          console.warn('Failed to check backup:', error)
        }
      }

      if (!shouldUseBackup) {
        setShowBackupNotification(false)
      }

      // Set content
      titleInputRef.current.value = initTitle
      editor.commands.setContent(initContent)
      
      // Update sync refs
      contentSyncRef.current = initContent
      titleSyncRef.current = initTitle
      
      // Initialize auto-save
      autoSave.initializeData(initTitle, initContent)
    }
  }, [note.id, note.content, note.title, note.updated, editor, autoSave.initializeData])

  const handleDelete = async () => {
    if (!note.id) return
    
    if (confirm('Are you sure you want to delete this note?')) {
      try {
        await deleteNote(note.id)
        onDelete(note.id)
      } catch (error) {
        console.error('Error deleting note:', error)
      }
    }
  }

  // Enhanced image upload
  const handleImageUpload = useCallback(async (file: File) => {
    if (!file.type.startsWith('image/') || !editor) {
      alert('Please select an image file')
      return
    }

    setIsUploading(true)
    try {
      const imageUrl = await uploadImage(file)
      editor.chain().focus().setImage({ src: imageUrl, alt: file.name }).run()
    } catch (error) {
      console.error('Failed to upload image:', error)
      alert('Failed to upload image. Please try again.')
    } finally {
      setIsUploading(false)
    }
  }, [editor])

  // Formatting functions
  const formatText = useCallback((format: string) => {
    if (!editor) return

    switch (format) {
      case 'bold':
        editor.chain().focus().toggleBold().run()
        break
      case 'italic':
        editor.chain().focus().toggleItalic().run()
        break
      case 'code':
        editor.chain().focus().toggleCode().run()
        break
      case 'codeblock':
        editor.chain().focus().toggleCodeBlock().run()
        break
      case 'link':
        const url = window.prompt('Enter URL:')
        if (url) {
          editor.chain().focus().setLink({ href: url }).run()
        }
        break
      case 'ul':
        editor.chain().focus().toggleBulletList().run()
        break
      case 'ol':
        editor.chain().focus().toggleOrderedList().run()
        break
      case 'quote':
        editor.chain().focus().toggleBlockquote().run()
        break
      case 'h1':
        editor.chain().focus().toggleHeading({ level: 1 }).run()
        break
      case 'h2':
        editor.chain().focus().toggleHeading({ level: 2 }).run()
        break
      case 'h3':
        editor.chain().focus().toggleHeading({ level: 3 }).run()
        break
      case 'table':
        editor.chain().focus().insertTable({ rows: 3, cols: 3, withHeaderRow: true }).run()
        break
      case 'undo':
        editor.chain().focus().undo().run()
        break
      case 'redo':
        editor.chain().focus().redo().run()
        break
    }
  }, [editor])

  // Keyboard shortcuts
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.metaKey || e.ctrlKey) {
        switch (e.key) {
          case 's':
            e.preventDefault()
            syncToAutoSave()
            autoSave.saveNow()
            break
        }
      }
    }

    document.addEventListener('keydown', handleKeyDown)
    return () => document.removeEventListener('keydown', handleKeyDown)
  }, [syncToAutoSave, autoSave.saveNow])

  // Stable memoized toolbar
  const toolbarButtons = useMemo(() => (
    <div className="flex items-center space-x-1">
      <Tooltip>
        <TooltipTrigger asChild>
          <Button 
            variant={editor?.isActive('bold') ? 'default' : 'ghost'} 
            size="sm" 
            onClick={() => formatText('bold')}
          >
            <Bold className="size-4" />
          </Button>
        </TooltipTrigger>
        <TooltipContent><p>Bold (⌘B)</p></TooltipContent>
      </Tooltip>

      <Tooltip>
        <TooltipTrigger asChild>
          <Button 
            variant={editor?.isActive('italic') ? 'default' : 'ghost'} 
            size="sm" 
            onClick={() => formatText('italic')}
          >
            <Italic className="size-4" />
          </Button>
        </TooltipTrigger>
        <TooltipContent><p>Italic (⌘I)</p></TooltipContent>
      </Tooltip>

      <Tooltip>
        <TooltipTrigger asChild>
          <Button 
            variant={editor?.isActive('code') ? 'default' : 'ghost'} 
            size="sm" 
            onClick={() => formatText('code')}
          >
            <Code className="size-4" />
          </Button>
        </TooltipTrigger>
        <TooltipContent><p>Inline code (⌘`)</p></TooltipContent>
      </Tooltip>

      <Separator orientation="vertical" className="h-6 mx-1" />

      <DropdownMenu>
        <DropdownMenuTrigger asChild>
          <Button variant="ghost" size="sm">
            <Heading1 className="size-4" />
            <ChevronDown className="size-3 ml-1" />
          </Button>
        </DropdownMenuTrigger>
        <DropdownMenuContent>
          <DropdownMenuItem onClick={() => formatText('h1')}>
            <Heading1 className="size-4 mr-2" />
            Heading 1
          </DropdownMenuItem>
          <DropdownMenuItem onClick={() => formatText('h2')}>
            <Heading2 className="size-4 mr-2" />
            Heading 2
          </DropdownMenuItem>
          <DropdownMenuItem onClick={() => formatText('h3')}>
            <Heading3 className="size-4 mr-2" />
            Heading 3
          </DropdownMenuItem>
        </DropdownMenuContent>
      </DropdownMenu>

      <Separator orientation="vertical" className="h-6 mx-1" />

      <Tooltip>
        <TooltipTrigger asChild>
          <Button 
            variant={editor?.isActive('bulletList') ? 'default' : 'ghost'} 
            size="sm" 
            onClick={() => formatText('ul')}
          >
            <List className="size-4" />
          </Button>
        </TooltipTrigger>
        <TooltipContent><p>Bullet list</p></TooltipContent>
      </Tooltip>

      <Tooltip>
        <TooltipTrigger asChild>
          <Button 
            variant={editor?.isActive('orderedList') ? 'default' : 'ghost'} 
            size="sm" 
            onClick={() => formatText('ol')}
          >
            <ListOrdered className="size-4" />
          </Button>
        </TooltipTrigger>
        <TooltipContent><p>Numbered list</p></TooltipContent>
      </Tooltip>

      <Tooltip>
        <TooltipTrigger asChild>
          <Button 
            variant={editor?.isActive('blockquote') ? 'default' : 'ghost'} 
            size="sm" 
            onClick={() => formatText('quote')}
          >
            <Quote className="size-4" />
          </Button>
        </TooltipTrigger>
        <TooltipContent><p>Quote</p></TooltipContent>
      </Tooltip>

      <Separator orientation="vertical" className="h-6 mx-1" />

      <Tooltip>
        <TooltipTrigger asChild>
          <Button 
            variant={editor?.isActive('link') ? 'default' : 'ghost'} 
            size="sm" 
            onClick={() => formatText('link')}
          >
            <LinkIcon className="size-4" />
          </Button>
        </TooltipTrigger>
        <TooltipContent><p>Insert link</p></TooltipContent>
      </Tooltip>

      <Tooltip>
        <TooltipTrigger asChild>
          <Button 
            variant="ghost" 
            size="sm" 
            onClick={() => fileInputRef.current?.click()}
            disabled={isUploading}
          >
            <ImageIcon className="size-4" />
          </Button>
        </TooltipTrigger>
        <TooltipContent><p>Upload image</p></TooltipContent>
      </Tooltip>

      <Tooltip>
        <TooltipTrigger asChild>
          <Button 
            variant={editor?.isActive('codeBlock') ? 'default' : 'ghost'} 
            size="sm" 
            onClick={() => formatText('codeblock')}
          >
            <FileCode className="size-4" />
          </Button>
        </TooltipTrigger>
        <TooltipContent><p>Code block</p></TooltipContent>
      </Tooltip>

      <Tooltip>
        <TooltipTrigger asChild>
          <Button 
            variant={editor?.isActive('table') ? 'default' : 'ghost'} 
            size="sm" 
            onClick={() => formatText('table')}
          >
            <TableIcon className="size-4" />
          </Button>
        </TooltipTrigger>
        <TooltipContent><p>Insert table</p></TooltipContent>
      </Tooltip>

      <Separator orientation="vertical" className="h-6 mx-1" />

      <Tooltip>
        <TooltipTrigger asChild>
          <Button 
            variant="ghost" 
            size="sm" 
            onClick={() => formatText('undo')}
            disabled={!editor?.can().undo()}
          >
            <Undo className="size-4" />
          </Button>
        </TooltipTrigger>
        <TooltipContent><p>Undo</p></TooltipContent>
      </Tooltip>

      <Tooltip>
        <TooltipTrigger asChild>
          <Button 
            variant="ghost" 
            size="sm" 
            onClick={() => formatText('redo')}
            disabled={!editor?.can().redo()}
          >
            <Redo className="size-4" />
          </Button>
        </TooltipTrigger>
        <TooltipContent><p>Redo</p></TooltipContent>
      </Tooltip>

      <input
        ref={fileInputRef}
        type="file"
        accept="image/*"
        onChange={(e) => {
          const file = e.target.files?.[0]
          if (file) {
            handleImageUpload(file)
          }
        }}
        className="hidden"
      />
    </div>
  ), [editor, formatText, isUploading, handleImageUpload])

  // Cleanup
  useEffect(() => {
    return () => {
      if (syncTimerRef.current) {
        clearTimeout(syncTimerRef.current)
      }
      editor?.destroy()
    }
  }, [editor])

  if (!editor) {
    return <div>Loading editor...</div>
  }

  return (
    <TooltipProvider>
      <div className="h-full flex flex-col bg-background">
        {/* Backup notification */}
        {showBackupNotification && (
          <div className="bg-blue-50 dark:bg-blue-950 border-b border-blue-200 dark:border-blue-800 px-6 py-2">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-2 text-sm text-blue-800 dark:text-blue-200">
                <AlertCircle className="size-4" />
                <span>Restored from local backup - your latest changes were recovered</span>
              </div>
              <Button 
                variant="ghost" 
                size="sm" 
                onClick={() => setShowBackupNotification(false)}
                className="h-6 w-6 p-0 text-blue-600 hover:bg-blue-100 dark:hover:bg-blue-900"
              >
                ×
              </Button>
            </div>
          </div>
        )}

        {/* Header */}
        <div className="border-b border-border bg-white dark:bg-card sticky top-0 z-10">
          {/* Title bar */}
          <div className="px-6 py-3 border-b border-border/50">
            <div className="flex items-center justify-between">
              <input
                ref={titleInputRef}
                type="text"
                onInput={handleTitleInput}
                placeholder="Untitled document"
                className="text-lg font-normal bg-transparent border-none outline-none focus:ring-0 flex-1 text-foreground placeholder:text-muted-foreground"
              />
              <div className="flex items-center space-x-3">
                <StatusDisplay 
                  status={autoSave.status}
                  lastSaved={autoSave.lastSaved}
                  saveNow={autoSave.saveNow}
                />
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <Button variant="ghost" size="sm">
                      <MoreVertical className="size-4" />
                    </Button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent align="end">
                    <DropdownMenuItem onClick={autoSave.saveNow} disabled={autoSave.status === 'saving'}>
                      <Save className="size-4 mr-2" />
                      {autoSave.status === 'saving' ? 'Saving...' : 'Save now'}
                    </DropdownMenuItem>
                    {typeof window !== 'undefined' && localStorage.getItem(autoSave.getBackupKey()) && (
                      <DropdownMenuItem 
                        onClick={autoSave.clearLocalStorageBackup}
                        className="text-muted-foreground"
                      >
                        Clear local backup
                      </DropdownMenuItem>
                    )}
                    <DropdownMenuSeparator />
                    <DropdownMenuItem onClick={handleDelete} className="text-destructive">
                      <Trash2 className="size-4 mr-2" />
                      Delete document
                    </DropdownMenuItem>
                  </DropdownMenuContent>
                </DropdownMenu>
              </div>
            </div>
          </div>

          {/* Toolbar */}
          <div className="px-6 py-2">
            <div className="flex items-center justify-between">
              {toolbarButtons}
            </div>
          </div>
        </div>

        {/* Tiptap Editor */}
        <div className="flex-1 overflow-hidden bg-gray-50 dark:bg-background">
          <div className="w-full h-full bg-white dark:bg-card overflow-y-auto">
            <EditorContent editor={editor} />
          </div>
        </div>
      </div>
    </TooltipProvider>
  )
})

export default TiptapEditor 