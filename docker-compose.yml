name: notes.whoisjason.me
services:
  notes:
    cpu_shares: 90
    command: []
    container_name: notes-whoisjason
    depends_on:
      pocketbase:
        condition: service_started
        required: true
    deploy:
      resources:
        limits:
          memory: 22957M
    entrypoint:
      - sh
      - -c
      - |
        echo "=== Notes Production Startup Log ==="
        echo "Node version: $(node --version)"
        echo "NPM version: $(npm --version)"
        echo "Operating system: $(uname -a)"
        echo ""

        echo "[STEP 1] Installing dependencies..."
        apk add --no-cache git openssh-client
        echo "Git installed: $(git --version)"
        echo ""

        echo "[STEP 2] Setting up workspace..."
        rm -rf /app/* /app/.[^.]* 2>/dev/null || true
        echo ""

        echo "[STEP 3] Cloning notes repository..."
        cd /tmp
        rm -rf notes 2>/dev/null || true
        git clone https://github.com/ljis120301/notes.git notes
        if [ $? -ne 0 ]; then
          echo "ERROR: Failed to clone notes repository"
          exit 1
        fi

        echo "Moving repository to /app..."
        cp -r /tmp/notes/. /app/
        cd /app
        echo "Notes repository cloned successfully"
        echo ""

        echo "[STEP 4] Verifying project structure..."
        if [ -f package.json ]; then
          echo "✓ package.json found"
        else
          echo "ERROR: package.json not found!"
          exit 1
        fi

        if [ -f next.config.ts ]; then
          echo "✓ next.config.ts found"
        else
          echo "✗ next.config.ts not found"
        fi

        if [ -d app ]; then
          echo "✓ app directory found"
        else
          echo "✗ app directory not found"
        fi

        if [ -d components ]; then
          echo "✓ components directory found"
        else
          echo "✗ components directory not found"
        fi
        echo ""

        echo "[STEP 5] Preparing npm environment..."
        # Clear npm cache to avoid conflicts
        npm cache clean --force
        # Remove any existing node_modules
        rm -rf node_modules package-lock.json
        echo "NPM cache cleared and node_modules removed"
        echo ""

        echo "[STEP 6] Installing npm dependencies..."
        # Install with specific flags for Docker environment
        npm install --no-optional --legacy-peer-deps --fetch-timeout=600000
        if [ $? -ne 0 ]; then
          echo "ERROR: npm install failed"
          echo "Attempting to install with different flags..."
          npm install --no-optional --legacy-peer-deps --prefer-offline --no-audit --no-fund
          if [ $? -ne 0 ]; then
            echo "ERROR: npm install failed on second attempt"
            exit 1
          fi
        fi
        
        # Verify critical Tailwind CSS v4 packages are installed
        echo "Verifying Tailwind CSS v4 installation..."
        if [ -d "node_modules/@tailwindcss/postcss" ]; then
          echo "✓ @tailwindcss/postcss found"
        else
          echo "✗ @tailwindcss/postcss NOT found - attempting to install directly"
          npm install @tailwindcss/postcss@^4 --no-optional --legacy-peer-deps
        fi
        
        if [ -d "node_modules/tailwindcss" ]; then
          echo "✓ tailwindcss found"
        else
          echo "✗ tailwindcss NOT found - attempting to install directly"
          npm install tailwindcss@^4 --no-optional --legacy-peer-deps
        fi
        
        echo "Dependencies installed successfully"
        echo ""

        echo "[STEP 7] Building application for production..."
        npm run build
        if [ $? -ne 0 ]; then
          echo "ERROR: Production build failed"
          echo "Debugging information:"
          echo "PostCSS config (ES module):"
          cat postcss.config.mjs
          echo ""
          echo "Attempting with CommonJS PostCSS config..."
          if [ -f postcss.config.js ]; then
            echo "PostCSS config (CommonJS):"
            cat postcss.config.js
            echo ""
            echo "Renaming PostCSS configs to use CommonJS version..."
            mv postcss.config.mjs postcss.config.mjs.backup
            echo "Retrying build with CommonJS PostCSS config..."
            npm run build
            if [ $? -ne 0 ]; then
              echo "ERROR: Build failed with CommonJS config too"
              echo "Node modules @tailwindcss/postcss:"
              ls -la node_modules/@tailwindcss/ 2>/dev/null || echo "Directory not found"
              echo ""
              echo "Package.json tailwind dependencies:"
              cat package.json | grep -A2 -B2 tailwind
              echo ""
              echo "NPM list of installed packages:"
              npm list | grep tailwind
              exit 1
            fi
          else
            echo "CommonJS PostCSS config not found"
            echo "Node modules @tailwindcss/postcss:"
            ls -la node_modules/@tailwindcss/ 2>/dev/null || echo "Directory not found"
            echo ""
            echo "Package.json tailwind dependencies:"
            cat package.json | grep -A2 -B2 tailwind
            echo ""
            echo "NPM list of installed packages:"
            npm list | grep tailwind
            exit 1
          fi
        fi
        echo "Application built successfully"
        echo ""

        echo "[STEP 8] Starting production server..."
        echo "Starting Next.js in production mode on port 3003..."
        exec npm run start
    environment:
      - GIT_TERMINAL_PROMPT=0
      - NODE_ENV=production
      - PORT=3003
    hostname: notes
    image: node:20-alpine
    labels:
      icon: https://www.vecteezy.com/vector-art/29722382-notes-icon-in-trendy-flat-style-isolated-on-white-background-notes-silhouette-symbol-for-your-website-design-logo-app-ui-vector-illustration-eps10
    ports:
      - target: 3003
        published: "3003"
        protocol: tcp
    restart: unless-stopped
    working_dir: /app
    x-casaos:
      architectures:
        - amd64
        - arm64
      category: Productivity
      description:
        en_us: A Next.js notes platform with PocketBase backend running in production mode.
          Automatically pulls the latest code from the notes GitHub repository and builds for
          optimized performance.
      developer: ljis120301
      icon: https://cdn.jsdelivr.net/gh/walkxcode/dashboard-icons/png/blog.png
      index: /
      main: notes
      port_map: "3003"
      scheme: http
      store_app_id: notes
      tagline:
        en_us: Notes - Production Next.js Notes Platform
      tips:
        en_us: The application will automatically pull the latest code from the notes
          GitHub repository and build for production on each container restart. Access the 
          notes at http://your-server-ip:3003. PocketBase admin interface is available at
          http://your-server-ip:6969/_/. Check container logs for build and startup
          information.
    volumes: []
    devices: []
    cap_add: []
    network_mode: bridge
    privileged: false
  pocketbase:
    cpu_shares: 90
    command: []
    container_name: pocketbase-notes
    deploy:
      resources:
        limits:
          memory: 22957M
    entrypoint:
      - sh
      - -c
      - >
        echo "=== PocketBase Startup Log ==="

        echo "Operating system: $(uname -a)"

        echo ""


        echo "[STEP 1] Verifying PocketBase binary..."

        if [ -f ./pocketbase/pocketbase ]; then
          echo "✓ PocketBase binary found at /app/pocketbase/pocketbase"
          echo "PocketBase version: $(./pocketbase/pocketbase --version 2>/dev/null || echo 'Unable to determine version')"
        else
          echo "ERROR: PocketBase binary not found at /app/pocketbase/pocketbase"
          echo "Current directory contents:"
          ls -la /app/
          if [ -d /app/pocketbase ]; then
            echo "Contents of /app/pocketbase:"
            ls -la /app/pocketbase/
          fi
          echo "Please ensure the PocketBase binary is located at /home/jason/pocketbase/pocketbase/pocketbase"
          exit 1
        fi

        echo ""


        echo "[STEP 2] Starting PocketBase server..."

        echo "Starting PocketBase on 0.0.0.0:6969..."

        exec ./pocketbase/pocketbase serve --http=0.0.0.0:6969
    hostname: pocketbase
    image: alpine:latest
    labels:
      icon: https://www.vecteezy.com/vector-art/29722382-notes-icon-in-trendy-flat-style-isolated-on-white-background-notes-silhouette-symbol-for-your-website-design-logo-app-ui-vector-illustration-eps10
    ports:
      - target: 6969
        published: "6969"
        protocol: tcp
    restart: unless-stopped
    volumes:
      - type: bind
        source: /home/jason/pocketbase
        target: /app
    working_dir: /app
    x-casaos:
      architectures:
        - amd64
        - arm64
      category: Database
      description:
        en_us: PocketBase backend database for the Notes application. Provides API
          endpoints and admin interface.
      developer: ljis120301
      icon: https://cdn.jsdelivr.net/gh/walkxcode/dashboard-icons/png/database.png
      index: /_/
      main: pocketbase
      port_map: "6969"
      scheme: http
      store_app_id: pocketbase
      tagline:
        en_us: PocketBase - Backend Database
      tips:
        en_us: PocketBase admin interface is available at http://your-server-ip:6969/_/.
          Database files are persisted to /home/jason/pocketbase on the host
          system.
    devices: []
    cap_add: []
    environment: []
    network_mode: bridge
    privileged: false
x-casaos:
  author: self
  category: self
  hostname: ""
  icon: https://www.vecteezy.com/vector-art/29722382-notes-icon-in-trendy-flat-style-isolated-on-white-background-notes-silhouette-symbol-for-your-website-design-logo-app-ui-vector-illustration-eps10
  index: /
  is_uncontrolled: false
  port_map: ""
  scheme: http
  store_app_id: notes.whoisjason.me
  title:
    custom: ""
    en_us: notes
